import os
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env

# 1. OpenAI / Codex client
from openai import OpenAI as OpenAIClient
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise ValueError("Missing OPENAI_API_KEY in environment")
openai_client = OpenAIClient(api_key=openai_api_key)

# 2. xAI / Grok client (using OpenAI-compatible SDK)
grok_api_key = os.getenv("XAI_API_KEY")
if not grok_api_key:
    raise ValueError("Missing XAI_API_KEY in environment")
grok_client = OpenAIClient(
    api_key=grok_api_key,
    base_url="https://api.x.ai/v1"
)

# 3. Anthropic / Claude client
from anthropic import Anthropic
anthropic_api_key = os.getenv("ANTHROPIC_API_KEY")
if not anthropic_api_key:
    raise ValueError("Missing ANTHROPIC_API_KEY in environment")
anthropic_client = Anthropic(api_key=anthropic_api_key)

# Example usage
def ask_openai(prompt):
    resp = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[{"role":"user","content":prompt}],
        temperature=0.7
    )
    return resp.choices[0].message.content

def ask_grok(prompt):
    resp = grok_client.chat.completions.create(
        model="grok-3",
        messages=[{"role":"user","content":prompt}]
    )
    return resp.choices[0].message.content

def ask_claude(prompt):
    resp = anthropic_client.messages.create(
        model="claude-sonnet-4-20250514",
        max_tokens=500,
        messages=[{"role":"user","content":prompt}]
    )
    return resp.content

if __name__ == "__main__":
    print("OpenAI says:", ask_openai("Hello from OpenAI!"))
    print("Grok says:", ask_grok("Hello from Grok!"))
    print("Claude says:", ask_claude("Hello from Claude!"))
